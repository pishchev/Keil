#include <stm32f0xx.h>
#include <time.h>
#include <stdbool.h>

static const uint32_t waitingPeriod = 10;
static const uint32_t checkPeriod = 10;

typedef struct _Button
{
	bool state;
	bool lastState;
	
	uint32_t timeAfterPress;
	uint32_t timeAfterChanges;
}Button;

void createButton(Button* button);
void createButton(Button* button)
{
	button->state = false;
	button->lastState = false;
	button->timeAfterPress = 0;
}

void ButtonEvent(Button* button, bool state);
void ButtonEvent(Button* button, bool state)
{	
	if (button->lastState == state) 
	{
		button->timeAfterChanges++;
	}
	else 
	{
		button->timeAfterChanges = 0;
	}
	
	if (button->timeAfterPress >= waitingPeriod &&
			button->timeAfterChanges >= checkPeriod)
	{
		button->state = state;
		button->timeAfterPress = 0;
	}
	
	if (button->timeAfterPress < waitingPeriod)
	{
		button->timeAfterPress++;
	}
	button->lastState = state;
}

void Init(void);
void Init()
{
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN|RCC_AHBENR_GPIOAEN;
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
	
	GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;
	
	GPIOC->MODER &= ~GPIO_MODER_MODER12;
	GPIOC->MODER |=	GPIO_MODER_MODER12_0;
	GPIOA->MODER &= ~GPIO_MODER_MODER4;
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR4_1;
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR5_1;
	GPIOA->MODER &= ~GPIO_MODER_MODER5;
	GPIOA->MODER &= ~GPIO_MODER_MODER15;
	GPIOA->MODER |= GPIO_MODER_MODER15_0;
}

void setBit(volatile uint32_t* bit, uint32_t value);
void setBit(volatile uint32_t* bit, uint32_t value) 
{
	*bit |= value;
}

void resetBit(volatile uint32_t* bit, uint32_t value);
void resetBit(volatile uint32_t* bit, uint32_t value)
{
	*bit &= ~value;
}

static Button buttons[4];

void SysTick_Handler(void);
void SysTick_Handler(void) 
{	
	GPIOA->ODR &= ~GPIO_ODR_15;
	GPIOC->ODR &= ~GPIO_ODR_12;
	GPIOA->IDR &= ~GPIO_IDR_4;
	GPIOA->IDR &= ~GPIO_IDR_5;
	
	GPIOA->ODR |= GPIO_ODR_15;
	GPIOC->ODR &= ~GPIO_ODR_12;

	ButtonEvent(&buttons[0], GPIOA->IDR & GPIO_IDR_4);
	ButtonEvent(&buttons[1], GPIOA->IDR & GPIO_IDR_5);
		
	GPIOA->ODR &= ~GPIO_ODR_15;
	GPIOC->ODR &= ~GPIO_ODR_12;
	GPIOA->IDR &= ~GPIO_IDR_4;
	GPIOA->IDR &= ~GPIO_IDR_5;
	
	GPIOA->ODR &= ~GPIO_ODR_15;
	GPIOC->ODR |= GPIO_ODR_12;
	
	ButtonEvent(&buttons[2], GPIOA->IDR & GPIO_IDR_4);
	ButtonEvent(&buttons[3], GPIOA->IDR & GPIO_IDR_5);
	
	GPIOA->ODR &= ~GPIO_ODR_15;
	GPIOC->ODR &= ~GPIO_ODR_12;
	GPIOA->IDR &= ~GPIO_IDR_4;
	GPIOA->IDR &= ~GPIO_IDR_5;
}

void sleep(unsigned int sec);
void sleep(unsigned int sec)
{
	unsigned int TimerTick = SystemCoreClock / 2000 * sec;
	SysTick->LOAD=TimerTick;
	SysTick->VAL=TimerTick;
	
	SysTick->CTRL =	SysTick_CTRL_CLKSOURCE_Msk |
									SysTick_CTRL_TICKINT_Msk   |
									SysTick_CTRL_ENABLE_Msk;
	
	while(1){
		if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
			break;
		}
	}
}

int main(void)
{
	Init();
	for(int i = 0; i < 4; ++i) {
		createButton(&(buttons[i]));
	}

	while(1) {
		resetBit(&GPIOC->ODR, GPIO_ODR_6);
		resetBit(&GPIOC->ODR, GPIO_ODR_7);
		resetBit(&GPIOC->ODR, GPIO_ODR_8);
		resetBit(&GPIOC->ODR, GPIO_ODR_9);
		
		if (buttons[0].state) {
			setBit(&GPIOC->ODR, GPIO_ODR_6);
		}
		
		if (buttons[1].state) {
			setBit(&GPIOC->ODR, GPIO_ODR_7);
		}
		
		if (buttons[3].state) {
			setBit(&GPIOC->ODR, GPIO_ODR_8);
		}
		
		if (buttons[2].state) {
			setBit(&GPIOC->ODR, GPIO_ODR_9);
		}
		sleep(1);
	}
}
